{"version":3,"sources":["components/ClickyScores/ClickyScores.js","components/ClickyImage/ClickyImage.js","App.js","serviceWorker.js","index.js"],"names":["ClickyScores","props","react_default","a","createElement","className","currentScore","highScore","ClickyImage","src","filename","alt","name","onClick","checkGuess","id","App","state","images","selectedSoFar","getFile","ind","_this","parseInt","getName","match","toLowerCase","shuffle","t","i","arr","m","length","Math","floor","random","setState","imageIndex","includes","doBadGuessActions","doGoodGuessActions","push","restartGame","max","this","components_ClickyScores_ClickyScores","components_ClickyImage_ClickyImage","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4689a006.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ClickyScores.css\";\n\n\n// this is just a functional \"dumb\" stateless component\n\n\nconst ClickyScores = props => (\n   <div className=\"mx-auto scorebarstyles\">\n   <span className=\"d-inline p-1 bg-primary text-white scorestyles\">Current Score: {props.currentScore}</span>\n   <span className=\"d-inline p-1 bg-dark text-white scorestyles\">High Score: {props.highScore}</span>\n   </div>\n\n);\n\nexport default ClickyScores;\n\n","import React from \"react\";\nimport \"./ClickyImage.css\";\n\n\n// this is just a functional \"dumb\" stateless component\n\n\nconst ClickyImage = props => (\n      <div className = \"col-xs-6 col-sm-4 col-md-3 col-xl-2\" >\n         <div className = \"thumbnail\">\n            <img className=\"imagestyle\" src={props.filename} alt={props.name} onClick={() => props.checkGuess(props.id)} />\n         </div> \n      </div>\n   \n);\n\nexport default ClickyImage;\n\n\n","import React, { Component } from 'react';\nimport ClickyScores  from \"./components/ClickyScores\";\nimport ClickyImage   from \"./components/ClickyImage\";\nimport './App.css';\n\nclass App extends Component {\n\n   state = {\n      images: [\"01Picard.jpg\",\"02Riker.jpg\",\"03Data.jpg\",\n                  \"04Geordi.jpg\",\"05Crusher.jpg\",\"06Worf.jpg\",\n                  \"07Troi.jpg\", \"08Miles.jpg\",\"09Wesley.jpg\",\n                  \"10Barclay.jpg\",\"11Alexander.jpg\",\"12Lal.jpg\"],\n\n      currentScore: 0,\n      highScore: 0,\n      selectedSoFar: []\n\n   }\n  \n  \n  componentDidMount() {\n     // console.log(\"IN COMPONENT DID MOUNT, YAY!\");\n     this.shuffle();\n  }\n\n  getFile = ind => {\n     //console.log(\"ind is \", ind, \" with source \", this.state.images[ind]);\n     //console.log(this.state);\n\n     return \"./images/\" + this.state.images[parseInt(ind)];\n  }\n\n  // This function is for the alt property of the IMG tag,\n  // and it just gets the name of the image, minus the number and file extension.\n  // So for instance, \"03Data.jpg\" becomes just \"Data\"\n  getName = ind => {\n     \n      let filename = this.state.images[ind];\n      let altName = filename.match(/[a-zA-Z]+/)[0].toLowerCase();\n \n      return altName;\n   }\n  \n\n  // This efficient \"shuffle\" algorithm function is not my own,\n  // it is from this page: \n  // https://bost.ocks.org/mike/shuffle/\n  shuffle = () =>  {\n\n   let arr = this.state.images;\n   let m = arr.length, t, i;\n \n   // While there remain elements to shuffle…\n   while (m) {\n \n     // Pick a remaining element…\n     i = Math.floor(Math.random() * m--);\n \n     // And swap it with the current element.\n     t = arr[m];\n     arr[m] = arr[i];\n     arr[i] = t;\n   }\n \n   this.setState({images: arr});\n }\n\n checkGuess = (imageIndex) => {\n    let filename = this.state.images[parseInt(imageIndex)];\n    // console.log(\"in check guess, the filename is: \", filename, \" and the array so far is \", this.state.selectedSoFar);\n\n    if (!this.state.selectedSoFar.includes(filename)) {\n       this.doGoodGuessActions(filename);\n    } else {\n       this.doBadGuessActions();\n    }\n }\n\n doGoodGuessActions = (filename) => {\n    // console.log(\"in doGoodGuessActions, filename is \", filename);\n    this.setState({currentScore: this.state.currentScore + 1});\n    // console.log(\"new current score is: \", this.state.currentScore);\n    let selectedSoFar = this.state.selectedSoFar;\n    selectedSoFar.push(filename);\n    this.setState({selectedSoFar});\n    // console.log(\"selected array is: \", this.state.selectedSoFar);\n    this.shuffle();\n    // console.log(\"cards should have been shuffled if this is appearing\");\n    // console.log(\"selected so far is now: \", this.state.selectedSoFar);\n\n }\n\n doBadGuessActions = () => {\n    // console.log(\"in doBadGuessActions\");\n   // it seems silly to have a function that only calls one other function,\n   // but it's possible that I might expand this game in the future to do more stuff,\n   // like keeping a log of moves so far, so I'm still structuring it like this for now.\n   this.restartGame();\n\n }\n\n restartGame = () => {\n   // console.log(\"in RESTART GAME\");\n   this.setState({highScore: Math.max(this.state.highScore, this.state.currentScore)});\n   this.setState({currentScore: 0});\n   this.setState({selectedSoFar: []});\n   this.shuffle();\n }\n  \n \n   render() {\n\n    return (\n    \n      <h1>\n      \n        <div className=\"container\">\n        <ClickyScores currentScore={this.state.currentScore} highScore={this.state.highScore}/>\n           <div className=\"row\">\n               <ClickyImage id={0} filename = {this.getFile(0)} name= {this.getName(0)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={1} filename = {this.getFile(1)} name= {this.getName(1)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={2}  filename = {this.getFile(2)} name= {this.getName(2)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={3}  filename = {this.getFile(3)} name= {this.getName(3)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={4}  filename = {this.getFile(4)} name= {this.getName(4)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={5}  filename = {this.getFile(5)} name= {this.getName(5)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={6}  filename = {this.getFile(6)} name= {this.getName(6)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={7}  filename = {this.getFile(7)} name= {this.getName(7)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={8}  filename = {this.getFile(8)} name= {this.getName(8)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={9}  filename = {this.getFile(9)} name= {this.getName(9)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={10}  filename = {this.getFile(10)} name= {this.getName(10)} checkGuess={this.checkGuess} /> \n               <ClickyImage id={11}  filename = {this.getFile(11)} name= {this.getName(11)} checkGuess={this.checkGuess} /> \n      </div>\n    </div>\n    </h1>\n   \n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}